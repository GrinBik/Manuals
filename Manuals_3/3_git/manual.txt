- Скачиваем git на компьютер и устанавливаем: "https://git-scm.com".


- Если git установлен, то можно его обновить по команде: "git update-git-for-windows".


Чтобы открыть консоль (терминал) в Windows нужно: найти командную строку в поиске или нажать комбинацию "Win + R".
В открывшемся терминале пишем команду: "git --version".
Если Git установлен, то мы увидим его версию.


- Настраиваем идентификацию автора, для этого:
                    git config --global user.email "почта"
                    git config --global user.name "имя"
Данная процедура проделывается один раз, после установки Git на компьютер.


- Подготовка к клонированию репозитория, созданного на GitHub, к себе на компьютер.
Время подготовиться к копированию (клонированию) первого репозитория, который создали ранее на GitHub. Для этого
необходимо изменить рабочую папку консоли. Для изменения директории понадобятся следующие команды:
                    cd <путь проекта> - переход в веденную директорию,
                    cd ../ - переход в директорию на одну папку выше.
Выбираем готовую папку проекта, которую создает PyCharm при создании проекта.


- Настраиваем SSH: "https://habr.com/ru/articles/755036/".


SSH (Secure SHell) - это сетевой протокол, посредством которого два компьютера могут взаимодействовать и
обмениваться данными. Важно, что данные при этом шифруются, поэтому протокол ssh считается безопасным.
С помощью ssh можно подключаться к удаленным серверам, выполнять на них команды, копировать и редактировать файлы.
Если у вас ещё нет пары ssh-ключей (приватного и публичного), их необходимо сгенерировать при помощи утилиты ssh-keygen.
Пишем команду "ssh-keygen -t ed25519", флаг -t задаём алгоритм, на основе которого будут сгенерированы ключи. GitHub,
GitLab и Yandex рекомендуют использовать алгоритм ed25519. Название файла, в который будет сохранён ключ, можно
оставить дефолтным. После чего в терминал будет выведено "изображение" вашего ключа из ASCII-символов (красивое), а
в папке ~/.ssh/ появятся два файла: id_ed25519 и id_ed25519.pub с приватным и публичным ключами соответственно. Для
удобства работы эти файлы можно переименовать:
                    "mv ~/.ssh/id_ed25519 ~/.ssh/personal_key",
                    "mv ~/.ssh/id_ed25519.pub ~/.ssh/personal_key.pub".
Чтобы ssh мог автоматически использовать правильные ключи при работе с удалёнными репозиториями, необходимо задать
некоторые настройки. А именно - добавить в файл ~/.ssh/config следующие строки:
                    Host github.com
                    HostName github.com
                    User git
                    IdentityFile ~/.ssh/personal_key
                    IdentitiesOnly yes
где:
                    gihub.com - url сервиса, с которым будем работать (указываем одинаковым в Host и HostName),
                    ~/.ssh/personal_key - путь до файла с приватным ключом, который необходимо использовать для
                    подключения.
Для того чтобы GitHub (или иной сервис) мог авторизовать ваше подключение, необходимо указать в настройках аккаунта
публичный ssh-ключ, который вы будете использовать для доступа к репозиториям (также можно указать несколько ключей).
На github.com эта процедура делается следующим образом:
- Переходим в "Settings" -> "SSH and GPG keys" (прямая ссылка: "https://github.com/settings/keys").
- Нажимаем "New SSH key".
- В поле "Key" вставляем содержимое файла personal_key.pub (либо id_ed25519.pub, если вы не переименовывали файлы).
- Нажимаем "Add SSH key".
При первом подключении по ssh необходимо будет добавить github.com (либо адрес того сервиса, который вы используете) в
список доверенных хостов:
                    The authenticity of host 'github.com (140.82.121.4)' can't be established.
                    RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
                    This key is not known by any other names
                    Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
                    Warning: Permanently added 'github.com' (RSA) to the list of known hosts.
                    Everything up-to-date

Альтернативная настройка ssh ключей для Windows:
"https://git-scm.com/book/ru/v2/Git-%D0%BD%D0%B0-%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%B5-%D0%93%D0%B5%D0%BD%D0%B5%D1%
80%D0%B0%D1%86%D0%B8%D1%8F-%D0%BE%D1%82%D0%BA%D1%80%D1%8B%D1%82%D0%BE%D0%B3%D0%BE-SSH-%D0%BA%D0%BB%D1%8E%D1%87%D0%B0".


- Клонируем репозиторий: "git clone ssh_строка_с _сайта".
В последующие же разы перед началом работы сначала git pull из директории проекта.


- Пишем программу: "manual.py".


- Практика работы с git.


Проверяем статус "git status". Добавляем файлы в git для того, чтобы git начал следить за ними: "git add имя_файла".
Проверяем статус "git status". Для того чтобы исключить файлы из списка отслеживаемых, создается файл под названием
gitignore ".gitignore". Добавляем в файл ".gitignore" все файлы и папки, которые не нужно отслеживать.
После, в файл ".gitignore" необходимо добавить в git для отслеживания "git add .gitignore". Фиксируем изменения и
сохраняем новую версию кода: "git commit -m 'комментарий'". Комментарии — важная часть коммита. Они позволяют понять,
что было изменено в коде. Если команда разработчиков русская, комментарии можно писать на русском языке. Если
подразумевается размещать проект в открытом доступе или в команде есть иностранные разработчики, следует писать
комментарии на английском языке. Отправляем на GitHub "git push".

Вносим изменения в программу "manual.py". Проделываем ту же процедуру.


- Увидим изменения на GitHub.
Перейдем на сайт GitHub. Откроем наш репозиторий и мы увидим, что файлы действительно добавились и все коммиты также
присутствуют.
