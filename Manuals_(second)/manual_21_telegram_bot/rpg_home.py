import telebot
from dotenv import load_dotenv
import os
import text, fight
import s_taper
from s_taper.consts import *
import time, random, datetime
from telebot.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton


def is_new_player(msg: telebot.types.Message):
    result = users.read_all()
    for user in result:
        if user[0] == msg.chat.id:
            return False
    return True


load_dotenv()
TOKEN = os.getenv('TELEGRAM_RPG_TOKEN')
bot = telebot.TeleBot(TOKEN)

user_scheme = {
    "userid": INT + KEY,
    "name": TEXT,
    "power": TEXT,
    "hp": INT,
    "dmg": INT,
    "lvl": INT,
    "xp": INT,
    "can": BLN
}

users = s_taper.Taper("users", "data.db").create_table(user_scheme)

heal_scheme = {
    "userid": INT + KEY,
    "food": TEXT
}

heals = s_taper.Taper("heals", "data.db").create_table(heal_scheme)

temp = {}

clear = ReplyKeyboardRemove()


@bot.message_handler(['start'])
def start(msg: telebot.types.Message):
    if is_new_player(msg):
        reg_1(msg)
        temp[msg.chat.id] = {"name": None}
    else:
        pass


def reg_1(msg: telebot.types.Message):
    bot.send_message(msg.chat.id, text.reg % msg.from_user.first_name)
    bot.register_next_step_handler(msg, reg_2)


def reg_2(msg: telebot.types.Message):
    if not temp[msg.chat.id]["name"]:
        temp[msg.chat.id]["name"] = msg.text
        kb = ReplyKeyboardMarkup(True, True)
        kb.row("–ó–µ–º–ª—è üåç", "–í–æ–¥–∞ üí¶")
        kb.row("–û–≥–æ–Ω—å üî•", "–í–æ–∑–¥—É—Ö üå¨Ô∏è")
        bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–∏—Ö–∏—é, –ø–∞–¥–∞–≤–∞–Ω.", reply_markup=kb)
        bot.register_next_step_handler(msg, reg_3)


def reg_3(msg: telebot.types.Message):
    if msg.text == "–û–≥–æ–Ω—å":
        bot.send_message(msg.chat.id, "–ú–∞–≥–∏—è –û–≥–Ω—è –ø–æ–¥ –∑–∞–ø—Ä–µ—Ç–æ–º –≤ –≥–æ—Ä–æ–¥–µ!")
        bot.register_next_step_handler(msg, reg_2)
        return
    temp[msg.chat.id]["power"] = msg.text
    hp, dmg = fight.powers[msg.text]
    users.write([msg.chat.id,
                 temp[msg.chat.id]["name"],
                 msg.text,
                 hp,
                 dmg,
                 1,
                 0,
                 False])
    heals.write([msg.chat.id, {}])
    bot.send_message(msg.chat.id, text='–ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω!', reply_markup=clear)
    time.sleep(2)
    menu(msg)


@bot.message_handler(['menu'])
def menu(msg: telebot.types.Message):
    try:
        temp[msg.chat.id]
    except KeyError:
        temp[msg.chat.id] = {}
    message = text.menu
    bot.send_message(msg.chat.id, message, reply_markup=clear)


@bot.message_handler(['square'])
def square(msg: telebot.types.Message):
    kb = telebot.types.ReplyKeyboardMarkup(True, True)
    kb.row("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    kb.row("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–ª—ã")
    bot.send_message(msg.chat.id, "–¢—ã –Ω–∞ –ø–ª–æ—â–∞–¥–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", reply_markup=kb)
    bot.register_next_step_handler(msg, square_handler)


def square_handler(msg: telebot.types.Message):
    if msg.text == "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è":
        workout(msg)
    if msg.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–ª—ã":
        exam(msg)


@bot.message_handler(['home'])
def home(msg: telebot.types.Message):
    kb = telebot.types.ReplyKeyboardMarkup(True, True)
    kb.row("–û—Ç–¥–æ—Ö–Ω—É—Ç—å")
    kb.row("–ü–µ—Ä–µ–∫—É—Å–∏—Ç—å")
    bot.send_message(msg.chat.id, "–¢—ã –≤ —Å–≤–æ–µ–º –ª–∞–≥–µ—Ä–µ, –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –¥–æ–º–∞!", reply_markup=kb)
    bot.register_next_step_handler(msg, home_handler)


def home_handler(msg: telebot.types.Message):
    if msg.text == "–û—Ç–¥–æ—Ö–Ω—É—Ç—å":
        sleep(msg)
    if msg.text == "–ü–µ—Ä–µ–∫—É—Å–∏—Ç—å":
        eat(msg)


@bot.message_handler(commands=['add_heal'])
def add_heal(msg: telebot.types.Message):
    _, food = heals.read("userid", msg.chat.id)

    food["–•–ª–µ–±"] = [1, 15]
    food["–ê–π–≤–∞"] = [1, 50]

    heals.write([msg.chat.id, food])
    bot.send_message(msg.chat.id, "–í—ã–¥–∞–ª–∏ –µ–¥—É!")


def eat(msg: telebot.types.Message):
    kb = InlineKeyboardMarkup()
    _, food = heals.read("userid", msg.chat.id)
    if food != {}:
        for key in food:
            kb.row(InlineKeyboardButton(f"{key} {food[key][1]}‚ù§Ô∏è -- {food[key][0]}—à—Ç.",
                                        callback_data=f"food_{key}_{food[key][1]}"))
        bot.send_message(msg.chat.id, "–ß—Ç–æ –±—É–¥–µ—à—å –µ—Å—Ç—å?", reply_markup=kb)
    else:
        bot.send_message(msg.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –µ–¥—ã (", reply_markup=clear)
        bot.send_message(msg.chat.id, text=text.menu)


@bot.callback_query_handler(func=lambda call: True)
def callback(call: telebot.types.CallbackQuery):
    if call.data.startswith("food_"):
        a = call.data.split("_")
        eating(call.message, a[1], a[2])
        kb = InlineKeyboardMarkup()
        _, food = heals.read("userid", call.message.chat.id)
        for key in food:
            kb.row(InlineKeyboardButton(f"{key} {food[key][1]}‚ù§Ô∏è -- {food[key][0]}—à—Ç.",
                                        callback_data=f"food_{key}_{food[key][1]}"))

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=kb)
    elif call.data.startswith("sleep_"):
        a = call.data.split("_")
        t = int(a[1])
        if t < 2:
            t = 1
        else:
            t //= 2
        bot.send_message(call.message.chat.id, f"–¢—ã –ª–µ–≥ –æ—Ç–¥—ã—Ö–∞—Ç—å –Ω–∞ {t} –º–∏–Ω—É—Ç")

        sleeping(call.message, a[1])
        time.sleep(t * 60)

        bot.delete_message(call.message.chat.id, call.message.message_id)
        menu(call.message)
    elif call.data == '0':
        menu(call.message)
    elif call.data == "menu":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        menu(call.message)
    elif call.data == "workout":
        player = users.read("userid", call.message.chat.id)
        player[4] += player[5] / 10
        player[4] = round(player[4], 4)
        users.write(player)
        bot.answer_callback_query(call.id, "–¢—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è –∏ —Ç–≤–æ—è —Å–∏–ª–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è! \n"
                                           f"–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞–Ω–æ—Å–∏—à—å {player[4]}‚öîÔ∏è", True)


def eating(msg, ft, hp):
    _, food = heals.read("userid", msg.chat.id)
    player = users.read("userid", msg.chat.id)
    # –û—Ç–Ω–∏–º–∞–µ–º –µ–¥—É
    if food[ft][0] == 1:
        del food[ft]
    else:
        food[ft][0] -= 1

    heals.write([msg.chat.id, food])

    # –î–æ–±–∞–≤–ª—è–µ–º –•–ü
    player[3] += int(hp)
    users.write(player)
    if food == {}:
        bot.send_message(msg.chat.id, "–£ —Ç–µ–±—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –µ–¥—ã (", reply_markup=clear)
        bot.send_message(msg.chat.id, text=text.menu)


def sleep(msg: telebot.types.Message):
    player = users.read("userid", msg.chat.id)
    low = int(fight.powers[player[2]][0] * player[5]) // 2 - player[3]
    high = int(fight.powers[player[2]][0] * player[5]) - player[3]
    kb = InlineKeyboardMarkup()
    if low > 0:
        kb.row(InlineKeyboardButton(f"–í–∑–¥—Ä–µ–º–Ω—É—Ç—å: +{low}‚ù§Ô∏è", callback_data=f"sleep_{low}"))
    if high > 0:
        kb.row(InlineKeyboardButton(f"–ü–æ—Å–ø–∞—Ç—å: +{high}‚ù§Ô∏è", callback_data=f"sleep_{high}"))
    if len(kb.keyboard) == 0:
        kb.row(InlineKeyboardButton("–°–ø–∞—Ç—å –Ω–µ —Ö–æ—á–µ—Ç—Å—è", callback_data="0"))
        bot.send_message(msg.chat.id, "–í—ã –ø–æ–ª–Ω—ã —Å–∏–ª, –∑–∞—á–µ–º –∂–µ –æ—Ç–¥—ã—Ö–∞—Ç—å!", reply_markup=kb)
    else:
        bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏, —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—à—å –æ—Ç–¥—ã—Ö–∞—Ç—å:", reply_markup=kb)


def sleeping(msg, hp):
    player = users.read("userid", msg.chat.id)
    player[3] += int(hp)
    users.write(player)


@bot.message_handler(['stats'])
def stats(msg: telebot.types.Message):
    player = users.read_obj("userid", msg.chat.id)
    t = f"{player.power[-1]} {player.name}:\n" \
        f"–ó–¥–æ—Ä–æ–≤—å–µ: {player.hp}‚ù§Ô∏è\n" \
        f"–£—Ä–æ–Ω: {player.dmg}‚öîÔ∏è\n" \
        f"LVL: {player.lvl}.{player.xp}‚öúÔ∏è\n\n" \

    _, food = heals.read("userid", msg.chat.id)
    if food != {}:
        t += "–ï–¥–∞:\n"
        for f in food:
            t += f"{f} ‚ù§Ô∏è{food[f][1]} ‚Äî {food[f][0]}—à—Ç.\n"
    bot.send_message(msg.chat.id, t)
    time.sleep(3)
    menu(msg)


def workout(msg: telebot.types.Message):
    kb = InlineKeyboardMarkup()
    kb.row(InlineKeyboardButton("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="workout"))
    kb.row(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="menu"))
    bot.send_message(msg.chat.id, "–ñ–º–∏, —á—Ç–æ–±—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!", reply_markup=kb)


def exam(msg: telebot.types.Message):
    player = users.read_obj("userid", msg.chat.id)
    bot.send_message(msg.chat.id, f"–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ –∏—Å–ø—ã—Ç–∞–Ω–∏—é, {player.name}!", reply_markup=clear)
    time.sleep(2)
    temp[msg.chat.id]["attack_count"] = 0
    start_exam(msg)


def start_exam(msg: telebot.types.Message):
    random.choice((block, attack))(msg)


def block(msg: telebot.types.Message):
    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ—Ä–æ–Ω –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –µ–≥–æ
    sides = ["–°–ª–µ–≤–∞", "–°–ø—Ä–∞–≤–∞", "–°–≤–µ—Ä—Ö—É", "–°–Ω–∏–∑—É"]
    random.shuffle(sides)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = telebot.types.ReplyKeyboardMarkup(True, False)
    kb.row(sides[0], sides[3])
    kb.row(sides[1], sides[2])

    # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–æ—Ä–æ–Ω—É —É–¥–∞—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    right = random.choice(sides)
    bot.send_message(msg.chat.id, f"–ó–∞—â–∏—â–∞–π—Å—è! –£–¥–∞—Ä {right}!", reply_markup=kb)
    temp[msg.chat.id]["block_start"] = datetime.datetime.now().timestamp()
    bot.register_next_step_handler(msg, block_handler, right)


def block_handler(msg: telebot.types.Message, side: str):
    final = datetime.datetime.now().timestamp()
    player = users.read_obj("userid", msg.chat.id)
    if final - temp[msg.chat.id]["block_start"] > player.dmg / 5 or side != msg.text:
        bot.send_message(msg.chat.id, "–¢–≤–æ—è —Ä–µ–∞–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–∞! –¢—ã –Ω–µ –≥–æ—Ç–æ–≤!")
        time.sleep(1)
        menu(msg)
        return

    temp[msg.chat.id]["attack_count"] += 1
    if temp[msg.chat.id]["attack_count"] == 10:
        player = users.read("userid", msg.chat.id)
        if player[4] > 40:
            player[7] = True
            users.write(player)
            bot.send_message(msg.chat.id, "–¢—ã –≥–æ—Ç–æ–≤ –∫ –∑–∞—â–∏—Ç–µ –≥–æ—Ä–æ–¥–∞, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!")
        else:
            bot.send_message(msg.chat.id, "–¢—ã –ø—Ä–æ—à–µ–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! –ù–æ —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —É—Ä–æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω!")
        time.sleep(1)
        menu(msg)
        return
    bot.send_message(msg.chat.id, f"–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!"
                                  f"\n–¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª {temp[msg.chat.id]["attack_count"]}/10 –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–∏–ª—ã")
    time.sleep(1)
    start_exam(msg)


def attack(msg: telebot.types.Message):
    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ—Ä–æ–Ω –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –µ–≥–æ
    sides = ["–°–ª–µ–≤–∞", "–°–ø—Ä–∞–≤–∞", "–°–≤–µ—Ä—Ö—É", "–°–Ω–∏–∑—É"]

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = telebot.types.ReplyKeyboardMarkup(True, False)
    kb.row(sides[0], sides[3])
    kb.row(sides[1], sides[2])

    bot.send_message(msg.chat.id, "–ö—É–¥–∞ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞?", reply_markup=kb)
    bot.register_next_step_handler(msg, attack_handler)


def attack_handler(msg: telebot.types.Message):
    sides = ["–°–ª–µ–≤–∞", "–°–ø—Ä–∞–≤–∞", "–°–≤–µ—Ä—Ö—É", "–°–Ω–∏–∑—É"]
    master = random.choice(sides)
    if master == msg.text:
        bot.send_message(msg.chat.id, "–¢–≤–æ—è –∞—Ç–∞–∫–∞ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–∞! –¢—ã –Ω–µ –≥–æ—Ç–æ–≤!")
        time.sleep(1)
        menu(msg)
        return
    temp[msg.chat.id]["attack_count"] += 1
    if temp[msg.chat.id]["attack_count"] == 10:
        player = users.read("userid", msg.chat.id)
        if player[4] > 40:
            player[7] = True
            users.write(player)
            bot.send_message(msg.chat.id, "–¢—ã –≥–æ—Ç–æ–≤ –∫ –∑–∞—â–∏—Ç–µ –≥–æ—Ä–æ–¥–∞, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!")
        else:
            bot.send_message(msg.chat.id, "–¢—ã –ø—Ä–æ—à–µ–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! –ù–æ —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —É—Ä–æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω!")
        time.sleep(1)
        menu(msg)
        return
    bot.send_message(msg.chat.id, f"–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!"
                                  f"\n–¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª {temp[msg.chat.id]["attack_count"]}/10 –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–∏–ª—ã")
    time.sleep(1)
    start_exam(msg)


bot.infinity_polling()

# –î–ó
# –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é attack, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –¥–∞–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫—É –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ 4-—Ö —Å—Ç–æ—Ä–æ–Ω –¥–ª—è –∞—Ç–∞–∫–∏.
# –ü–æ—Å–ª–µ –∞—Ç–∞–∫–∏ —Ç—Ä–µ–Ω–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±—Ä–∞—Ç—å —Å—Ç–æ—Ä–æ–Ω—É –∑–∞—â–∏—Ç—ã.
# –ï—Å–ª–∏ –∞—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Å—á—ë—Ç—á–∏–∫ –¥—Ä–∞–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è) —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 1.

# –ï—Å–ª–∏ —Å—á—ë—Ç—á–∏–∫ –¥—Ä–∞–∫–∏ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç 10 –∏ —É—Ä–æ–Ω –∏–≥—Ä–æ–∫–∞ > 40,
# —Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ –∏ –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—â–∏—â–∞—Ç—å –≥–æ—Ä–æ–¥.
# –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–∏–¥—ë—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
