import tkinter
from tkinter.colorchooser import askcolor
from tkinter.filedialog import asksaveasfile
from PIL import ImageGrab, Image
from tkinter.filedialog import asksaveasfile


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ ".jpg"
def save_file():
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
    files = [('Image Files', '*.jpg'),
             ('Python Files', '*.py'),
             ('Text Document', '*.txt'),
             ('All Files', '*.*')]
    # –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –ø–æ –≤—ã–±–æ—Ä—É —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    file_name = asksaveasfile(filetypes=files, defaultextension='*.jpg').name
    # –õ–µ–≤–∞—è –≤–µ—Ä—Ö–Ω—è—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–æ X –∏ Y
    x = root.winfo_rootx() + canvas.winfo_x()
    y = root.winfo_rooty() + canvas.winfo_y()
    # –ü—Ä–∞–≤–∞—è –Ω–∏–∂–Ω—è—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ø–æ X –∏ Y
    x1 = x + canvas.winfo_width()
    y1 = y + canvas.winfo_height()
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    ImageGrab.grab().crop((x, y, x1, y1)).save(file_name)


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–æ—Ä–º—ã —Ä—É—á–∫–∏
def change_form(new_form):
    global form, thickness
    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç—ã –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ª—â–∏–Ω–æ–π –ø–µ—Ä–∞
    if new_form == 'plus' and thickness < 99:
        thickness += 1
        size.configure(text=thickness)
    elif new_form == 'minus' and thickness > 0:
        thickness -= 1
        size.configure(text=thickness)
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –ø–µ—Ä–∞
    else:
        form = new_form


# –†–∏—Å–æ–≤–∞–Ω–∏–µ
def draw(event):
    global thickness
    # –ï—Å–ª–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –≤–Ω–µ —Ö–æ–ª—Å—Ç–∞, —Ç–æ –Ω–∏–∫–∞–∫–æ–π —Ä–µ–∞–∫—Ü–∏–∏
    if event.widget.__class__ is not tkinter.Canvas:
        return
    # –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–æ–π "–∫—Ä—É–≥"
    if form == "circle":
        canvas.create_oval(event.x - thickness,
                           event.y - thickness,
                           event.x + thickness,
                           event.y + thickness,
                           fill=color,
                           outline=color)
    # –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–æ–π "–∫–≤–∞–¥—Ä–∞—Ç"
    elif form == "square":
        canvas.create_rectangle(event.x - thickness,
                                event.y - thickness,
                                event.x + thickness,
                                event.y + thickness,
                                fill=color,
                                outline=color)
    # –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–æ–π "–ª–∏–Ω–∏—è 1"
    elif form == "line1":
        canvas.create_line(event.x - thickness,
                           event.y - thickness,
                           event.x + thickness,
                           event.y + thickness,
                           fill=color)
    # –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–æ–π "–ª–∏–Ω–∏—è 2"
    elif form == "line2":
        canvas.create_line(event.x + thickness,
                           event.y - thickness,
                           event.x - thickness,
                           event.y + thickness,
                           fill=color)


# "–õ–∞—Å—Ç–∏–∫" —Ñ–æ—Ä–º—ã "–∫—Ä—É–≥"
def erase(event):
    canvas.create_oval(event.x - thickness,
                       event.y - thickness,
                       event.x + thickness,
                       event.y + thickness,
                       fill="white",
                       outline="white")


# –ü–∞–ª–∏—Ç—Ä–∞
def ask_color(event):
    global color
    color = askcolor(title="–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç")[1]
    size.configure(fg=color)


# –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ —Ö–æ–ª—Å—Ç–∞
def canvas_clear(event):
    canvas.delete('all')


# –û–∫–Ω–æ
root = tkinter.Tk()
root.geometry("800x600")
root.title("¬´–†–∏—Å–æ–≤–∞–ª–∫–∞¬ª")
root["bg"] = 'gray'
root.resizable(0, 0)

# –•–æ–ª—Å—Ç
canvas = tkinter.Canvas(root, width=700, height=600, bg="white")
canvas.pack(side=tkinter.LEFT, fill=tkinter.Y)

# –ö–Ω–æ–ø–∫–∞ "–∫–≤–∞–¥—Ä–∞—Ç"
square_btn = tkinter.Button(root, text="üü•", font=(None, 20), command=lambda: change_form('square'))
square_btn.pack(side=tkinter.TOP, fill=tkinter.X)
# –ö–Ω–æ–ø–∫–∞ "–∫—Ä—É–≥"
circle_btn = tkinter.Button(root, text="üî¥", font=(None, 20), command=lambda: change_form("circle"))
circle_btn.pack(side=tkinter.TOP, fill=tkinter.X)
# –ö–Ω–æ–ø–∫–∞ "–ª–∏–Ω–∏—è 1"
line1_btn = tkinter.Button(root, text=" ‚Üò ", font=(None, 20), command=lambda: change_form("line1"))
line1_btn.pack(side=tkinter.TOP, fill=tkinter.X)
# –ö–Ω–æ–ø–∫–∞ "–ª–∏–Ω–∏—è 2"
line2_btn = tkinter.Button(root, text=" ‚Üô ", font=(None, 20), command=lambda: change_form("line2"))
line2_btn.pack(side=tkinter.TOP, fill=tkinter.X)
# –ö–Ω–æ–ø–∫–∞ "–ø–ª—é—Å"
plus_btn = tkinter.Button(root, text="‚ûï", font=(None, 20), command=lambda: change_form("plus"))
plus_btn.pack(side=tkinter.TOP, fill=tkinter.X)
# –ö–Ω–æ–ø–∫–∞ "–º–∏–Ω—É—Å"
minus_btn = tkinter.Button(root, text="‚ûñ", font=(None, 20), command=lambda: change_form("minus"))
minus_btn.pack(side=tkinter.TOP, fill=tkinter.X)
# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–≥–æ —Ö–æ–ª—Å—Ç–∞
clear_btn = tkinter.Button(root, text="C", font=(None, 20), command=lambda: canvas_clear("<BackSpace>"))
clear_btn.pack(side=tkinter.TOP, fill=tkinter.BOTH)

# –§–æ—Ä–º–∞ –ø–µ—Ä–∞
form = "circle"
# –¢–æ–ª—â–∏–Ω–∞ –ø–µ—Ä–∞
thickness = 10
# –¶–≤–µ—Ç –ø–µ—Ä–∞
color = 'black'

# –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –ø–µ—Ä–∞ –∏ –µ–≥–æ —Ü–≤–µ—Ç
size = tkinter.Label(root, text=thickness, fg=color, font=(None, 32))
size.pack(side=tkinter.TOP, fill=tkinter.X)

# –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –Ω–µ–≥–æ
filename = tkinter.Entry(root)
filename.pack(side=tkinter.TOP, fill=tkinter.X)

# –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
save_btn = tkinter.Button(root, text="Save", font=(None, 20), command=save_file)
save_btn.pack(side=tkinter.TOP, fill=tkinter.BOTH)

# –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ - —Ä–∏—Å–æ–≤–∞–Ω–∏–µ
root.bind_all('<1>', draw)
root.bind_all("<B1-Motion>", draw)
# –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ - "–ª–∞—Å—Ç–∏–∫"
root.bind_all("<3>", erase)
root.bind_all("<B3-Motion>", erase)
# –ö–Ω–æ–ø–∫–∞ "—Å" - –ø–∞–ª–∏—Ç—Ä–∞
canvas.bind_all("<c>", ask_color)
# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–≥–æ —Ö–æ–ª—Å—Ç–∞
canvas.bind_all("<BackSpace>", canvas_clear)

root.mainloop()
